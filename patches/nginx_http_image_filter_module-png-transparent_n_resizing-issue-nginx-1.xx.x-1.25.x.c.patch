--- src/http/modules/ngx_http_image_filter_module.c    2023-06-29 21:32:03.165251407 +0900
+++ src/http/modules/ngx_http_image_filter_module.c.patch   2023-06-29 21:41:46.542650186 +0900
@@ -44,6 +44,7 @@
     ngx_uint_t                   angle;
     ngx_uint_t                   jpeg_quality;
     ngx_uint_t                   webp_quality;
+    ngx_uint_t                   png_compression_level;
     ngx_uint_t                   sharpen;

     ngx_flag_t                   transparency;
@@ -54,6 +55,7 @@
     ngx_http_complex_value_t    *acv;
     ngx_http_complex_value_t    *jqcv;
     ngx_http_complex_value_t    *wqcv;
+    ngx_http_complex_value_t    *pclv;
     ngx_http_complex_value_t    *shcv;

     size_t                       buffer_size;
@@ -114,6 +116,8 @@
     ngx_command_t *cmd, void *conf);
 static char *ngx_http_image_filter_webp_quality(ngx_conf_t *cf,
     ngx_command_t *cmd, void *conf);
+static char *ngx_http_image_filter_png_compression_level(ngx_conf_t *cf,
+    ngx_command_t *cmd, void *conf);
 static char *ngx_http_image_filter_sharpen(ngx_conf_t *cf, ngx_command_t *cmd,
     void *conf);
 static ngx_int_t ngx_http_image_filter_init(ngx_conf_t *cf);
@@ -142,6 +146,13 @@
       0,
       NULL },

+    { ngx_string("image_filter_png_compression_level"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_http_image_filter_png_compression_level,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      0,
+      NULL },
+
     { ngx_string("image_filter_sharpen"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
       ngx_http_image_filter_sharpen,
@@ -821,7 +832,7 @@
 {
     int                            sx, sy, dx, dy, ox, oy, ax, ay, size,
                                    colors, palette, transparent, sharpen,
-                                   red, green, blue, t;
+                                   t;
     u_char                        *out;
     ngx_buf_t                     *b;
     ngx_uint_t                     resize;
@@ -856,19 +867,12 @@

         if (transparent != -1) {
             palette = colors;
-            red = gdImageRed(src, transparent);
-            green = gdImageGreen(src, transparent);
-            blue = gdImageBlue(src, transparent);
-
             goto transparent;
         }
     }

     palette = 0;
     transparent = -1;
-    red = 0;
-    green = 0;
-    blue = 0;

 transparent:

@@ -1038,10 +1042,6 @@
         }
     }

-    if (transparent != -1 && colors) {
-        gdImageColorTransparent(dst, gdImageColorExact(dst, red, green, blue));
-    }
-
     sharpen = ngx_http_image_filter_get_value(r, conf->shcv, conf->sharpen);
     if (sharpen > 0) {
         gdImageSharpen(dst, sharpen);
@@ -1194,8 +1194,20 @@
         break;

     case NGX_HTTP_IMAGE_PNG:
-        out = gdImagePngPtr(img, size);
-        failed = "gdImagePngPtr() failed";
+        conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);
+        q = ngx_http_image_filter_get_value(r, conf->pclv, conf->png_compression_level);
+        if ( (q < 0 || q > 9) && q != 99 ) {
+            return NULL;
+        }
+
+         // default compress level : -1
+         if (q == 99 ) {
+              q = -1;
+         }
+
+        out = gdImagePngPtrEx(img, size, q);
+        failed = "gdImagePngPtrEx() failed";
+
         break;

     case NGX_HTTP_IMAGE_WEBP:
@@ -1292,12 +1304,14 @@
      *     conf->acv = NULL;
      *     conf->jqcv = NULL;
      *     conf->wqcv = NULL;
+     *     conf->pclv = NULL;
      *     conf->shcv = NULL;
      */

     conf->filter = NGX_CONF_UNSET_UINT;
     conf->jpeg_quality = NGX_CONF_UNSET_UINT;
     conf->webp_quality = NGX_CONF_UNSET_UINT;
+    conf->png_compression_level = NGX_CONF_UNSET_UINT;
     conf->sharpen = NGX_CONF_UNSET_UINT;
     conf->transparency = NGX_CONF_UNSET;
     conf->interlace = NGX_CONF_UNSET;
@@ -1349,6 +1363,16 @@
         }
     }

+    if (conf->png_compression_level == NGX_CONF_UNSET_UINT) {
+
+        /* -1 is libpng default compression level */
+        ngx_conf_merge_uint_value(conf->png_compression_level, prev->png_compression_level, 99);
+
+        if (conf->pclv == NULL) {
+            conf->pclv = prev->pclv;
+        }
+    }
+
     if (conf->sharpen == NGX_CONF_UNSET_UINT) {
         ngx_conf_merge_uint_value(conf->sharpen, prev->sharpen, 0);

@@ -1616,6 +1640,55 @@


 static char *
+ngx_http_image_filter_png_compression_level(ngx_conf_t *cf, ngx_command_t *cmd,
+    void *conf)
+{
+    ngx_http_image_filter_conf_t *imcf = conf;
+
+    ngx_str_t                         *value;
+    ngx_int_t                          n;
+    ngx_http_complex_value_t           cv;
+    ngx_http_compile_complex_value_t   ccv;
+
+    value = cf->args->elts;
+
+    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));
+
+    ccv.cf = cf;
+    ccv.value = &value[1];
+    ccv.complex_value = &cv;
+
+    if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
+        return NGX_CONF_ERROR;
+    }
+
+    if (cv.lengths == NULL) {
+        n = ngx_http_image_filter_value(&value[1]);
+
+        if (n < 0 && n > 9) {
+            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                               "invalid value \"%V\", png compression level: 0 -> none, 1-9 -> level", &value[1]);
+            return NGX_CONF_ERROR;
+        }
+
+        imcf->png_compression_level = (ngx_uint_t) n;
+
+    } else {
+        imcf->pclv = ngx_palloc(cf->pool, sizeof(ngx_http_complex_value_t));
+        if (imcf->pclv == NULL) {
+            return NGX_CONF_ERROR;
+        }
+
+        *imcf->pclv = cv;
+    }
+
+    return NGX_CONF_OK;
+}
+
+
+
+
+static char *
 ngx_http_image_filter_sharpen(ngx_conf_t *cf, ngx_command_t *cmd,
     void *conf)
 {
